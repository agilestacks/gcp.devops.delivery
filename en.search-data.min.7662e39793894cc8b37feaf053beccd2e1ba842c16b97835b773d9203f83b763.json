[{"id":0,"href":"/gke/just-gke/","title":"Empty GKE","section":"GKE","content":"GKE Sandbox #  Deploy with CloudShell  Description #  Just Google Kubernetes Engine cluster\nList of the components used in this sandbox:\n GKE Cluster  Click Start to go through the sandbox installation instructions.\nPrerequisites #    You must be logged into your GCP account.\n  Open the Google cloudshell using the following link\n  NOTE: The next steps must be executed from within the cloudshell\nConfiguration #  Before you can deploy the sandbox we need to ask you for some information.\nPlease run the initialization command pointing to the hub manifest file:\nhub stack init -f hub-gke-with-demo-app.yaml The command will ask you to enter the ID of your GCP project.\nSome of the components create DNS records (for easier access to the provisioned services) and some of them also need a GCS bucket to store their states. The tool (hub cli) we use to provision sandboxes itself produces a state file that must be uploaded to the cloud. For simplicity, we can pre-create Cloud DNS Zone and GCS bucket in your GCP project with random names.\nPlease run the following command to configure the environment of pre-create the required cloud resources (Cloud DNS Zone and GCS bucket):\nhub stack configure If any of the sandbox components would require additional configuration parameters, users will be asked to provide them.\nEvery component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool. Please explore parameters section of the hub-just-gke.yaml to see what parameters are available. Any default value can be overridden. To get more information on how the components are implemented refer to their README files.\nHow to recover the configuration of an existing sandbox? #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nExecute the following commands to recover a state of a sandbox:\nhub stack init -f hub-gke-with-demo-app.yaml -s {GCS path to a state file of the sanbox} hub stack configure Please browse GCS buckets in your project to find the right one by the convention below:\nGCS path naming convention:\ngs://{sandbox state bucket}/{stack dns name}/hub/hub.state\nExample:\ngs://superhub-superhub/overconfident-corvo-216.epam.devops.delivery/hub/hub.state\nAfter state is recovered, you can undeploy or update your sandbox.\nStack Deployment #  Run hub stack deploy to deploy the sandbox\nRun hub stack undeploy to undeploy the sandbox\nRun hub stack deploy -c \u0026lt;name-of-the-component\u0026gt; to deploy a specific component on the sandbox\nRun hub undeploy -c \u0026lt;name-of-the-component\u0026gt; to undeploy a specific component on the sandbox\nParameters #  TBD: List of sandbox params to override\n"},{"id":1,"href":"/vm/php-web-server/","title":"Web Server + PHP + Cloud SQL","section":"VM","content":"Web Server Sandbox Stack #  Deploy with CloudShell  Description #  Web Server Sandbox stack with VM, private VPC, load balancer, private Cloud SQL\nClick Start to go through the installation instructions.\nPrerequisites #    You must be logged into your GCP account.\n  Open the Google cloudshell using the following link\n  NOTE: The next steps must be executed from within the cloudshell\nStack Configuration #  Before you can deploy the stack we need to ask you for some information.\nPlease run the stack initialization command pointing to the hub manifest file:\nhub stack init -f hub-php-web-server.yaml The command will ask you to enter the ID of your GCP project.\nSome of the components create DNS records (for easier access to the provisioned services) and some of them also need a GCS bucket to store their states. For simplicity, we can pre-create Cloud DNS Zone and GCS bucket in your GCP project with random names.\nPlease run the following command to configure environment of the stack and pre-create required cloud resources (Cloud DNS Zone and GCS bucket):\nhub stack configure Every component has a set of parameters (key-value pairs) such as VM imagr or Cloud SQL database name or user. Please explore parameters section of the hub-php-web-server.yaml to see what parameters are available. Any default value can be overridden. To get more information on how the components are implemented refer to their README files.\nStack Deployment #  Run hub stack deploy to deploy the stack\nRun hub stack undeploy to undeploy the stack\nRun hub stack deploy -c \u0026lt;name-of-the-component\u0026gt; to deploy a specific component on the stack\nRun hub undeploy -c \u0026lt;name-of-the-component\u0026gt; to undeploy a specific component on the stack\nComponents #  List of the components used in this stack:\n SSL Certificate VPC Network Cloud SQL Cloud NAT Managed Instance Group Load balancing DNS Zone Record Load generator  Parameters #  TBD: List of stack params to override\nArchitecture Diagram #  "},{"id":2,"href":"/composer/with-demo-app/","title":"With Demo App","section":"Cloud Composer","content":"Cloud Composer #  Deploy with CloudShell  This sandbox will deploy a Cloud Composer\nList of the components used in this sandbox:\n Network Cloud Composer Environment Dataflow Pipeline Example Cloud Storage Bucket BigQuery Table   Note: additional details are available in Cloud Composer Guide\n Configuration #  Before you can deploy the sandbox please run the initialization command pointing to the hub manifest file:\nhub stack init -f hub-composer-demo-app.yaml The command will prompt you to enter the ID of your GCP project.\nNext, please run the following command to configure the environment. You will be prompted for Composer version - use values v1 or v2.\nhub stack configure How to recover the configuration of an existing sandbox? #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nExecute the following commands to recover a state of a sandbox:\nhub stack init -f hub-composer-demo-app.yaml -s {GCS path to a state file of the sanbox} hub stack configure Please browse GCS buckets in your project to find the right one by the convention below:\nGCS path naming convention:\ngs://{sandbox state bucket}/{stack dns name}/hub/hub.state\nExample:\ngs://superhub-superhub/overconfident-corvo-216.epam.devops.delivery/hub/hub.state\nAfter state is recovered, you can undeploy or update your sandbox.\nDeployment #  Once you are done with the configuration, use the following command to deploy a sandbox\nhub stack deploy If you want to change environemnt configuration and redeploy a composer environment run following command\nhub stack undeploy -c \u0026#34;composer\u0026#34; # make a change now in the configuration or in the body of the component hub stack deploy -c \u0026#34;composer\u0026#34;  Note: ieven in minimal configuration it will still take 20+ minutes to redeploy\n To delete the sandbox, run the followng command:\nhub stack undeploy Getting deployment result #  After successful deployment you will get three URLs\n Airflow URL GCS bucket GKE Cluster  You can also find it by running command:\nhub show If you want to see only the configuration parameters used by Composer run the following command\nhub show -c \u0026#34;composer\u0026#34; Get GKE kubeconfig #  Use a query string for\ncluster_name=\u0026#34;$(hub show -q \u0026#39;.parameters.composer.gkeCluster\u0026#39; -- -Mr)\u0026#34; gcloud container clusters get-credentials \u0026#34;$cluster_name\u0026#34;  # to confirm cluster setup k cluster-info TODO: we may want to delegate this to the composer component post-deploy. Depends if we bother to deploy on top anything else, (i.e. Ingress Controller, user apps etc as set of components)\nAdditional Parameters #  Additional parameters can be modified in hub-composer-demo-app.yaml file\n   Name Description Default Value     gke.nodeCount Number of GKE nodes for compose environment. Must be at least 3 3   gke.machineType Number of GKE nodes for compose environment n1-standard-1   composer.version Version of composer (v1 or v2) when v2 v1   component.network.subnetworkCidr Target environment subnet address range 10.127.0.0/20    You can read about configuration options here: https://cloud.google.com/composer/docs/how-to/managing/creating\nSee also #   Cloud Composer Guide Creating Environment  Architecture Diagram #  "},{"id":3,"href":"/gke/with-demo-app/","title":"With Demo App","section":"GKE","content":"GKE Sandbox #  Deploy with CloudShell  Description #  GKE Sandbox with ingress controller and demo application\n     List of the components used in this sandbox:\n GKE Cluster Nginx - ingress controller External DNS - dns record provisioner Online Boutique - Demo APP  Click Start to go through the sandbox installation instructions.\nPrerequisites #    You must be logged into your GCP account.\n  Open the Google cloudshell using the following link\n  NOTE: The next steps must be executed from within the cloudshell\nConfiguration #  Before you can deploy the sandbox we need to ask you for some information.\nPlease run the initialization command pointing to the hub manifest file:\nhub stack init -f hub-gke-with-demo-app.yaml The command will ask you to enter the ID of your GCP project.\nSome of the components create DNS records (for easier access to the provisioned services) and some of them also need a GCS bucket to store their states. The tool (hub cli) we use to provision sandboxes itself produces a state file that must be uploaded to the cloud. For simplicity, we can pre-create Cloud DNS Zone and GCS bucket in your GCP project with random names.\nPlease run the following command to configure the environment of pre-create the required cloud resources (Cloud DNS Zone and GCS bucket):\nhub stack configure If any of the sandbox components would require additional configuration parameters, users will be asked to provide them.\nEvery component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool. Please explore parameters section of the hub-gke-with-demo-app.yaml to see what parameters are available. Any default value can be overridden. To get more information on how the components are implemented refer to their README files.\nHow to recover the configuration of an existing sandbox? #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nExecute the following commands to recover a state of a sandbox:\nhub stack init -f hub-gke-with-demo-app.yaml -s {GCS path to a state file of the sanbox} hub stack configure Please browse GCS buckets in your project to find the right one by the convention below:\nGCS path naming convention:\ngs://{sandbox state bucket}/{stack dns name}/hub/hub.state\nExample:\ngs://superhub-superhub/overconfident-corvo-216.epam.devops.delivery/hub/hub.state\nAfter state is recovered, you can undeploy or update your sandbox.\nStack Deployment #  Run hub stack deploy to deploy the sandbox\nRun hub stack undeploy to undeploy the sandbox\nRun hub stack deploy -c \u0026lt;name-of-the-component\u0026gt; to deploy a specific component on the sandbox\nRun hub undeploy -c \u0026lt;name-of-the-component\u0026gt; to undeploy a specific component on the sandbox\nParameters #  TBD: List of sandbox params to override\nArchitecture Diagram #  "},{"id":4,"href":"/cloud-sql/with-load-test/","title":"With Load Test","section":"Cloud SQL","content":"Cloud SQL with Load Test #  Deploy with CloudShell  Description #  Cloud SQL with Load Test example\nList of the components used in this sandbox:\n VPC Network Cloud SQL K6 Example SQL Performance Test  Click Start to go through the sandbox installation instructions.\nPrerequisites #    You must be logged into your GCP account.\n  Open the Google cloudshell using the following link\n  NOTE: The next steps must be executed from within the cloudshell\nConfiguration #  Before you can deploy the sandbox we need to ask you for some information.\nPlease run the initialization command pointing to the hub manifest file:\nhub stack init -f hub-cloud-sql-perftest.yaml The command will prompt you to enter the ID of your GCP project.\nSome of the components create DNS records (for easier access to the provisioned services) and some of them also need a GCS bucket to store their states. The tool (hub cli) we use to provision sandboxes itself produces a state file that must be uploaded to the cloud. For simplicity, we can pre-create Cloud DNS Zone and GCS bucket in your GCP project with random names.\nPlease run the following command to configure the environment of pre-create the required cloud resources (Cloud DNS Zone and GCS bucket):\nhub stack configure If any of the sandbox components would require additional configuration parameters, users will be asked to provide them.\nEvery component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool. Please explore parameters section of the hub-cloud-sql-perftest.yaml to see what parameters are available. Any default value can be overridden. To get more information on how the components are implemented refer to their README files.\nHow to recover the configuration of an existing sandbox? #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nExecute the following commands to recover a state of a sandbox:\nhub stack init -f hub-cloud-sql-perftest.yaml -s {GCS path to a state file of the sanbox} hub stack configure Please browse GCS buckets in your project to find the right one by the convention below:\nGCS path naming convention:\ngs://{sandbox state bucket}/{stack dns name}/hub/hub.state\nExample:\ngs://superhub-superhub/overconfident-corvo-216.epam.devops.delivery/hub/hub.state\nAfter state is recovered, you can undeploy or update your sandbox.\nStack Deployment #  Run hub stack deploy to deploy the sandbox\nRun hub stack undeploy to undeploy the sandbox\nRun hub stack deploy -c k6-sql-load-test to re-run the load test.\nFeel free to adjust parameter values in hub-cloud-sql-perftest.yaml such as component.k6SQLloadTest.testDuration or component.k6SQLloadTest.numberOfUsers to change test behaviour.\nArchitecture Diagram #  "},{"id":5,"href":"/gke/anthos-with-demo-app/","title":"ASM with Demo App","section":"GKE","content":"GKE Sandbox #  Deploy with CloudShell  Description #  GKE Sandbox with Anthos Service Mesh, ingress controller, and demo application.\n     List of the components used in this sandbox:\n GKE Cluster GKE Node Pool Anthos Service Mesh Anthos Ingress Gateway DNS Zone Record Online Boutique - Demo APP  Click Start to go through the installation instructions.\nPrerequisites #    You must be logged into your GCP account.\n  Open the Google cloudshell using the following link (if not already opened):\n  NOTE: The next steps must be executed from within the cloudshell\nConfiguration #  Before you can deploy the sandbox we need to ask you for some information.\nPlease run the initialization command pointing to the hub manifest file:\nhub stack init -f hub-anthos-with-demo-app.yaml The command will ask you to enter the ID of your GCP project.\nSome of the components create DNS records (for easier access to the provisioned services) and some of them also need a GCS bucket to store their states. The tool (hub cli) we use to provision sandboxes itself produces a state file that must be uploaded to the cloud. For simplicity, we can pre-create Cloud DNS Zone and GCS bucket in your GCP project with random names.\nPlease run the following command to configure the environment of pre-create the required cloud resources (Cloud DNS Zone and GCS bucket):\nhub stack configure If any of the sandbox components would require additional configuration parameters, users will be asked to provide them.\nEvery component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool. Please explore parameters section of the hub-anthos-with-demo-app.yaml to see what parameters are available. Any default value can be overridden. To get more information on how the components are implemented refer to their README files.\nHow to recover the configuration of an existing sandbox? #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nExecute the following commands to recover a state of a sandbox:\nhub stack init -f hub-anthos-with-demo-app.yaml -s {GCS path to a state file of the sanbox} hub stack configure Please browse GCS buckets in your project to find the right one by the convention below:\nGCS path naming convention:\ngs://{sandbox state bucket}/{stack dns name}/hub/hub.state\nExample:\ngs://superhub-superhub/overconfident-corvo-216.epam.devops.delivery/hub/hub.state\nAfter state is recovered, you can undeploy or update your sandbox.\nStack Deployment #  Run hub stack deploy to deploy the sandbox\nRun hub stack undeploy to undeploy the sandbox\nRun hub stack deploy -c \u0026lt;name-of-the-component\u0026gt; to deploy a specific component on the sandbox\nRun hub undeploy -c \u0026lt;name-of-the-component\u0026gt; to undeploy a specific component on the sandbox\nParameters #  TBD: List of sandbox params to override\nArchitecture Diagram #  "}]
[{"id":0,"href":"/gke/gke-empty-cluster/","title":"Empty GKE","section":"GKE","content":"GKE Sandbox #  Deploy with CloudShell  Description #  Just Google Kubernetes Engine cluster\nList of the components used in this sandbox:\n GKE Cluster  Setup #   NOTE: If you want to undeploy or update an existing sandbox please proceed directly to Step 3 - Recover\n First you need initialize the sandbox configuration. To do this please run the initialization command:\nhub stack init The command will prompt you to enter the GCP project ID and will create initial configuration files and download required components.\nBy default command enable auto configure of sandbox during deploy or undeploy.\nAdvanced use case #  For some advanced cases you need to configure sandbox manually. To do this just pass --disable-auto-configure flag:\nhub stack init --disable-auto-configure And after that to configure sandbox manually run command:\nhub stack configure The [Hub CLI] produces a state file after provisioning of sandbox, same as its components, and it must be uploaded to the cloud. For simplicity, we pre-create Cloud DNS Zone and GCS bucket in your GCP project with pre-generated names. This is done during configure command.\nDeploy Sandbox #  Once you are done with the configuration, use the following command to deploy the sandbox:\nhub stack deploy To deploy a specific component on the sandbox:\nhub stack deploy -c \u0026lt;name-of-the-component\u0026gt; Undeploy Sandbox #  To delete the sandbox run this command:\nhub stack undeploy To undeploy a specific component on the sandbox:\nhub stack undeploy -c \u0026lt;name-of-the-component\u0026gt; Parameters #  Each component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool, etc.\nPlease explore parameters section of the hub.yaml to see what parameters are available. Any default value can be overridden. To get more information on how components are implemented refer to their README files.\nRecover #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nTo recover your sandbox please follow the steps below.\nSwitch to your current project:\ngcloud config set project \u0026lt;project-id\u0026gt; List all recent sandboxes deployed to your project and find ID of the sandbox you would like to recover:\nhub state ls Initialize your sandbox:\nhub stack init \u0026lt;id\u0026gt; [Hub CLI] will find the location of the state file, download it and prepare configuration files.\nAfter stack recovery undeploy or update your existing stack using corresponding commands.\n"},{"id":1,"href":"/vm/vm-php-web-server/","title":"Web Server + PHP + Cloud SQL","section":"VM","content":"Web Server Sandbox Stack #  Deploy with CloudShell  Description #  Web Server Sandbox stack with VM, private VPC, load balancer, private Cloud SQL\nList of the components used in this stack:\n SSL Certificate VPC Network Cloud SQL Cloud NAT Managed Instance Group Load balancing DNS Zone Record Load generator  Setup #   NOTE: If you want to undeploy or update an existing sandbox please proceed directly to Step 3 - Recover\n First you need initialize the sandbox configuration. To do this please run the initialization command:\nhub stack init The command will prompt you to enter the GCP project ID and will create initial configuration files and download required components.\nBy default command enable auto configure of sandbox during deploy or undeploy.\nAdvanced use case #  For some advanced cases you need to configure sandbox manually. To do this just pass --disable-auto-configure flag:\nhub stack init --disable-auto-configure And after that to configure sandbox manually run command:\nhub stack configure The Hub CLI produces a state file after provisioning of sandbox, same as its components, and it must be uploaded to the cloud. For simplicity, we pre-create Cloud DNS Zone and GCS bucket in your GCP project with pre-generated names. This is done during configure command.\nDeploy Sandbox #  Once you are done with the configuration, use the following command to deploy the sandbox:\nhub stack deploy To deploy a specific component on the sandbox:\nhub stack deploy -c \u0026lt;name-of-the-component\u0026gt; Undeploy Sandbox #  To delete the sandbox run this command:\nhub stack undeploy To undeploy a specific component on the sandbox:\nhub stack undeploy -c \u0026lt;name-of-the-component\u0026gt; Parameters #  Each component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool, etc.\nPlease explore parameters section of the hub.yaml to see what parameters are available. Any default value can be overridden. To get more information on how components are implemented refer to their README files.\nRecover #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nTo recover your sandbox please follow the steps below.\nSwitch to your current project:\ngcloud config set project \u0026lt;project-id\u0026gt; List all recent sandboxes deployed to your project and find ID of the sandbox you would like to recover:\nhub state ls Initialize your sandbox:\nhub stack init \u0026lt;id\u0026gt; Hub CLI will find the location of the state file, download it and prepare configuration files.\nAfter stack recovery undeploy or update your existing stack using corresponding commands.\nArchitecture Diagram #  "},{"id":2,"href":"/composer/composer-demo-app/","title":"With Demo App","section":"Cloud Composer","content":"Cloud Composer #  Deploy with CloudShell  Description #  This sandbox will deploy a Cloud Composer\nList of the components used in this sandbox:\n Network Cloud Composer Environment Dataflow Pipeline Example Cloud Storage Bucket BigQuery Table   Note: additional details are available in Cloud Composer Guide\n Setup #   NOTE: If you want to undeploy or update an existing sandbox please proceed directly to Step 3 - Recover\n First you need initialize the sandbox configuration. To do this please run the initialization command:\nhub stack init The command will prompt you to enter the GCP project ID and will create initial configuration files and download required components.\nBy default command enable auto configure of sandbox during deploy or undeploy.\nAdvanced use case #  For some advanced cases you need to configure sandbox manually. To do this just pass --disable-auto-configure flag:\nhub stack init --disable-auto-configure And after that to configure sandbox manually run command:\nhub stack configure The Hub CLI produces a state file after provisioning of sandbox, same as its components, and it must be uploaded to the cloud. For simplicity, we pre-create Cloud DNS Zone and GCS bucket in your GCP project with pre-generated names. This is done during configure command.\nDeploy Sandbox #  Once you are done with the configuration, use the following command to deploy the sandbox:\nhub stack deploy If you want to change environemnt configuration and redeploy a composer environment run following command:\nhub stack undeploy -c \u0026#34;composer\u0026#34; Make a change in the sandbox configuration or in the body of the component and run next command:\nhub stack deploy -c \u0026#34;composer\u0026#34;  Note: even in minimal configuration it will still take 20+ minutes to redeploy\n Undeploy Sandbox #  To delete the sandbox, run the followng command:\nhub stack undeploy Parameters #  Each component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool, etc.\nPlease explore parameters section of the hub.yaml to see what parameters are available. Any default value can be overridden. To get more information on how components are implemented refer to their README files.\n   Name Description Default Value     gke.nodeCount Number of GKE nodes for compose environment. Must be at least 3 3   gke.machineType Number of GKE nodes for compose environment n1-standard-1   composer.version Version of composer (v1 or v2) when v2 v1   component.network.subnetworkCidr Target environment subnet address range 10.127.0.0/20    You can read about configuration options here: https://cloud.google.com/composer/docs/how-to/managing/creating\nRecover #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nTo recover your sandbox please follow the steps below.\nSwitch to your current project:\ngcloud config set project \u0026lt;project-id\u0026gt; List all recent sandboxes deployed to your project and find ID of the sandbox you would like to recover:\nhub state ls Initialize your sandbox:\nhub stack init \u0026lt;id\u0026gt; Hub CLI will find the location of the state file, download it and prepare configuration files.\nAfter stack recovery undeploy or update your existing stack using corresponding commands.\nGetting deployment result #  After successful deployment you will get three URLs\n Airflow URL GCS bucket GKE Cluster  You can also find it by running command:\nhub show If you want to see only the configuration parameters used by Composer run the following command\nhub show -c \u0026#34;composer\u0026#34; Get GKE kubeconfig #  Use a query string for\ncluster_name=\u0026#34;$(hub show -q \u0026#39;.parameters.composer.gkeCluster\u0026#39; -- -Mr)\u0026#34; gcloud container clusters get-credentials \u0026#34;$cluster_name\u0026#34;  # to confirm cluster setup k cluster-info  TODO: we may want to delegate this to the composer component post-deploy. Depends if we bother to deploy on top anything else, (i.e. Ingress Controller, user apps etc as set of components)\n See also #   Cloud Composer Guide Creating Environment  Architecture Diagram #  "},{"id":3,"href":"/composer/composer/","title":"Just Composer","section":"Cloud Composer","content":"Cloud Composer #  Deploy with CloudShell  This sandbox will deploy a Cloud Composer\nList of the components used in this sandbox:\n Network Cloud Composer Environment   Note: additional how-to information is available in Cloud Composer Guide\n Setup #   NOTE: If you want to undeploy or update an existing sandbox please proceed directly to Step 3 - Recover\n First you need initialize the sandbox configuration. To do this please run the initialization command:\nhub stack init The command will prompt you to enter the GCP project ID and will create initial configuration files and download required components.\nBy default command enable auto configure of sandbox during deploy or undeploy.\nAdvanced use case #  For some advanced cases you need to configure sandbox manually. To do this just pass --disable-auto-configure flag:\nhub stack init --disable-auto-configure And after that to configure sandbox manually run command:\nhub stack configure The Hub CLI produces a state file after provisioning of sandbox, same as its components, and it must be uploaded to the cloud. For simplicity, we pre-create Cloud DNS Zone and GCS bucket in your GCP project with pre-generated names. This is done during configure command.\nDeploy Sandbox #  Once you are done with the configuration, use the following command to deploy the sandbox:\nhub stack deploy If you want to change environemnt configuration and redeploy a composer environment run following command:\nhub stack undeploy -c \u0026#34;composer\u0026#34; Make a change in the sandbox configuration or in the body of the component and run next command:\nhub stack deploy -c \u0026#34;composer\u0026#34;  Note: even in minimal configuration it will still take 20+ minutes to redeploy\n Undeploy Sandbox #  To delete the sandbox, run the followng command:\nhub stack undeploy Parameters #  Each component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool, etc.\nPlease explore parameters section of the hub.yaml to see what parameters are available. Any default value can be overridden. To get more information on how components are implemented refer to their README files.\n   Name Description Default Value     gke.nodeCount Number of GKE nodes for compose environment. Must be at least 3 3   gke.machineType Number of GKE nodes for compose environment n1-standard-1   composer.version Version of composer (v1 or v2) when v2 v1   component.network.subnetworkCidr Target environment subnet address range 10.127.0.0/20    You can read about configuration options here: https://cloud.google.com/composer/docs/how-to/managing/creating\nRecover #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nTo recover your sandbox please follow the steps below.\nSwitch to your current project:\ngcloud config set project \u0026lt;project-id\u0026gt; List all recent sandboxes deployed to your project and find ID of the sandbox you would like to recover:\nhub state ls Initialize your sandbox:\nhub stack init \u0026lt;id\u0026gt; Hub CLI will find the location of the state file, download it and prepare configuration files.\nAfter stack recovery undeploy or update your existing stack using corresponding commands.\nGetting deployment result #  After successful deployment you will get three URLs\n Airflow URL GCS bucket GKE Cluster  You can also find it by running command:\nhub show If you want to see only the configuration parameters used by Composer run the following command\nhub show -c \u0026#34;composer\u0026#34; Get GKE kubeconfig #  Use a query string for\ncluster_name=\u0026#34;$(hub show -q \u0026#39;.parameters.composer.gkeCluster\u0026#39; -- -Mr)\u0026#34; gcloud container clusters get-credentials \u0026#34;$cluster_name\u0026#34;  # to confirm cluster setup k cluster-info  TODO: we may want to delegate this to the composer component post-deploy. Depends if we bother to deploy on top anything else, (i.e. Ingress Controller, user apps etc as set of components)\n See also #   Cloud Composer Guide Creating Environment  "},{"id":4,"href":"/gke/gke-with-demo-app/","title":"With Demo App","section":"GKE","content":"GKE Sandbox #  Deploy with CloudShell  Description #  GKE Sandbox with ingress controller and demo application\nList of the components used in this sandbox:\n GKE Cluster Nginx - ingress controller External DNS - dns record provisioner Online Boutique - Demo APP  Setup #   NOTE: If you want to undeploy or update an existing sandbox please proceed directly to Step 3 - Recover\n First you need initialize the sandbox configuration. To do this please run the initialization command:\nhub stack init The command will prompt you to enter the GCP project ID and will create initial configuration files and download required components.\nBy default command enable auto configure of sandbox during deploy or undeploy.\nAdvanced use case #  For some advanced cases you need to configure sandbox manually. To do this just pass --disable-auto-configure flag:\nhub stack init --disable-auto-configure And after that to configure sandbox manually run command:\nhub stack configure The Hub CLI produces a state file after provisioning of sandbox, same as its components, and it must be uploaded to the cloud. For simplicity, we pre-create Cloud DNS Zone and GCS bucket in your GCP project with pre-generated names. This is done during configure command.\nDeploy Sandbox #  Once you are done with the configuration, use the following command to deploy the sandbox:\nhub stack deploy To deploy a specific component on the sandbox:\nhub stack deploy -c \u0026lt;name-of-the-component\u0026gt; Undeploy Sandbox #  To delete the sandbox run this command:\nhub stack undeploy To undeploy a specific component on the sandbox:\nhub stack undeploy -c \u0026lt;name-of-the-component\u0026gt; Parameters #  Each component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool, etc.\nPlease explore parameters section of the hub.yaml to see what parameters are available. Any default value can be overridden. To get more information on how components are implemented refer to their README files.\nRecover #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nTo recover your sandbox please follow the steps below.\nSwitch to your current project:\ngcloud config set project \u0026lt;project-id\u0026gt; List all recent sandboxes deployed to your project and find ID of the sandbox you would like to recover:\nhub state ls Initialize your sandbox:\nhub stack init \u0026lt;id\u0026gt; Hub CLI will find the location of the state file, download it and prepare configuration files.\nAfter stack recovery undeploy or update your existing stack using corresponding commands.\nSee also #   Demo App Source Code and Documentation  Architecture Diagram #  "},{"id":5,"href":"/cloud-sql/cloud-sql-perftest/","title":"With Load Test","section":"Cloud SQL","content":"Cloud SQL with Perfomance Test #  Deploy with CloudShell  Description #  Cloud SQL with Load Test example\nList of the components used in this sandbox:\n VPC Network Cloud SQL K6 Example SQL Performance Test  Setup #   NOTE: If you want to undeploy or update an existing sandbox please proceed directly to Step 3 - Recover\n First you need initialize the sandbox configuration. To do this please run the initialization command:\nhub stack init The command will prompt you to enter the GCP project ID and will create initial configuration files and download required components.\nBy default command enable auto configure of sandbox during deploy or undeploy.\nAdvanced use case #  For some advanced cases you need to configure sandbox manually. To do this just pass --disable-auto-configure flag:\nhub stack init --disable-auto-configure And after that to configure sandbox manually run command:\nhub stack configure The Hub CLI produces a state file after provisioning of sandbox, same as its components, and it must be uploaded to the cloud. For simplicity, we pre-create Cloud DNS Zone and GCS bucket in your GCP project with pre-generated names. This is done during configure command.\nDeploy Sandbox #  Once you are done with the configuration, use the following command to deploy the sandbox:\nhub stack deploy To re-run the load test:\nhub stack deploy -c k6-sql-load-test Feel free to adjust parameter values in hub.yaml such ascomponent.k6SQLloadTest.testDuration or component.k6SQLloadTest.numberOfUsers to change test behaviour.\nIf any of the sandbox components would require additional configuration parameters, users will be asked to provide them.\nUndeploy Sandbox #  To delete the sandbox, run the followng command:\nhub stack undeploy Parameters #  Each component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool, etc.\nPlease explore parameters section of the hub.yaml to see what parameters are available. Any default value can be overridden. To get more information on how components are implemented refer to their README files.\nRecover #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nTo recover your sandbox please follow the steps below.\nSwitch to your current project:\ngcloud config set project \u0026lt;project-id\u0026gt; List all recent sandboxes deployed to your project and find ID of the sandbox you would like to recover:\nhub state ls Initialize your sandbox:\nhub stack init \u0026lt;id\u0026gt; Hub CLI will find the location of the state file, download it and prepare configuration files.\nAfter stack recovery undeploy or update your existing stack using corresponding commands.\nArchitecture Diagram #  "},{"id":6,"href":"/gke/gke-anthos-with-demo-app/","title":"ASM with Demo App","section":"GKE","content":"GKE Sandbox #  Deploy with CloudShell  Description #  GKE Sandbox with Anthos Service Mesh, ingress controller, and demo application.\nList of the components used in this sandbox:\n GKE Cluster GKE Node Pool Anthos Service Mesh Anthos Ingress Gateway DNS Zone Record Online Boutique - Demo APP  Setup #   NOTE: If you want to undeploy or update an existing sandbox please proceed directly to Step 3 - Recover\n First you need initialize the sandbox configuration. To do this please run the initialization command:\nhub stack init The command will prompt you to enter the GCP project ID and will create initial configuration files and download required components.\nBy default command enable auto configure of sandbox during deploy or undeploy.\nAdvanced use case #  For some advanced cases you need to configure sandbox manually. To do this just pass --disable-auto-configure flag:\nhub stack init --disable-auto-configure And after that to configure sandbox manually run command:\nhub stack configure The Hub CLI produces a state file after provisioning of sandbox, same as its components, and it must be uploaded to the cloud. For simplicity, we pre-create Cloud DNS Zone and GCS bucket in your GCP project with pre-generated names. This is done during configure command.\nDeploy Sandbox #  Once you are done with the configuration, use the following command to deploy the sandbox:\nhub stack deploy To deploy a specific component on the sandbox:\nhub stack deploy -c \u0026lt;name-of-the-component\u0026gt; Undeploy Sandbox #  To delete the sandbox run this command:\nhub stack undeploy To undeploy a specific component on the sandbox:\nhub stack undeploy -c \u0026lt;name-of-the-component\u0026gt; Parameters #  Each component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool, etc.\nPlease explore parameters section of the hub.yaml to see what parameters are available. Any default value can be overridden. To get more information on how components are implemented refer to their README files.\nRecover #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nTo recover your sandbox please follow the steps below.\nSwitch to your current project:\ngcloud config set project \u0026lt;project-id\u0026gt; List all recent sandboxes deployed to your project and find ID of the sandbox you would like to recover:\nhub state ls Initialize your sandbox:\nhub stack init \u0026lt;id\u0026gt; Hub CLI will find the location of the state file, download it and prepare configuration files.\nAfter stack recovery undeploy or update your existing stack using corresponding commands.\nSee also #   Demo App Source Code and Documentation  Architecture Diagram #  "},{"id":7,"href":"/examples/terraform-example/","title":"Terraform Example","section":"Examples","content":"Terraform example #  Deploy with CloudShell  Description #  Stack to demostraite capabilities of terraform on simple examples\nSetup #   NOTE: If you want to undeploy or update an existing sandbox please proceed directly to Step 3 - Recover\n First you need initialize the sandbox configuration. To do this please run the initialization command:\nhub stack init The command will prompt you to enter the GCP project ID and will create initial configuration files and download required components.\nBy default command enable auto configure of sandbox during deploy or undeploy.\nAdvanced use case #  For some advanced cases you need to configure sandbox manually. To do this just pass --disable-auto-configure flag:\nhub stack init --disable-auto-configure And after that to configure sandbox manually run command:\nhub stack configure The [Hub CLI] produces a state file after provisioning of sandbox, same as its components, and it must be uploaded to the cloud. For simplicity, we pre-create Cloud DNS Zone and GCS bucket in your GCP project with pre-generated names. This is done during configure command.\nDeploy Sandbox #  Once you are done with the configuration, use the following command to deploy the sandbox:\nhub stack deploy To deploy a specific component on the sandbox:\nhub stack deploy -c \u0026lt;name-of-the-component\u0026gt; Undeploy Sandbox #  To delete the sandbox run this command:\nhub stack undeploy To undeploy a specific component on the sandbox:\nhub stack undeploy -c \u0026lt;name-of-the-component\u0026gt; Parameters #  Each component has a set of parameters (key-value pairs) such as GKE cluster name or number of nodes in a node pool, etc.\nPlease explore parameters section of the hub.yaml to see what parameters are available. Any default value can be overridden. To get more information on how components are implemented refer to their README files.\nRecover #  Google Cloud Shell environments are ephemeral, which means any files stored locally on the Cloud Shell machine will be lost when the machine restarts. Luckily, we store sandbox state files in the Cloud, which means, if we lose a local state, we can always recover it from the Cloud.\nTo recover your sandbox please follow the steps below.\nSwitch to your current project:\ngcloud config set project \u0026lt;project-id\u0026gt; List all recent sandboxes deployed to your project and find ID of the sandbox you would like to recover:\nhub state ls Initialize your sandbox:\nhub stack init \u0026lt;id\u0026gt; [Hub CLI] will find the location of the state file, download it and prepare configuration files.\nAfter stack recovery undeploy or update your existing stack using corresponding commands.\n"}]